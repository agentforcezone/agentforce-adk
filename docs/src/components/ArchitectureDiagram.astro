---
interface Node {
  label: string;
  description?: string;
  color?: string;
}

interface Props {
  title?: string;
  nodes: Node[];
  showConnectors?: boolean;
}

const { title, nodes, showConnectors = true } = Astro.props;

// Generate random but stable colors if not provided
const getColor = (index: number, color?: string) => {
  if (color) return color;
  const colors = [
    "var(--sl-color-primary)", 
    "#507ee3",
    "#f5a623",
    "#9cff57",
    "#ff6b6b"
  ];
  return colors[index % colors.length];
};
---

<div class="architecture-diagram">
  {title && <h3>{title}</h3>}
  <div class="diagram">
    {nodes.map((node, index) => (
      <>
        <div class="node" style={`--node-color: ${getColor(index, node.color)}`}>
          <div class="node-label">{node.label}</div>
          {node.description && <div class="node-description">{node.description}</div>}
        </div>
        {showConnectors && index < nodes.length - 1 && <div class="connector"></div>}
      </>
    ))}
  </div>
</div>

<style>
  .architecture-diagram {
    margin: 2rem 0;
    padding-top: 2rem;
    padding-bottom: 2rem;
  }

  h3 {
    text-align: center;
    margin-bottom: 2rem;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .diagram {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .node {
    background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0.05));
    border: 2px solid var(--node-color);
    border-radius: 0.75rem;
    padding: 1rem;
    min-width: 150px;
    max-width: 250px;
    text-align: center;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }

  .node:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  }

  .node-label {
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--node-color);
    margin-bottom: 0.5rem;
  }

  .node-description {
    font-size: 0.85rem;
    color: var(--sl-color-gray-2);
  }

  .connector {
    height: 2px;
    width: 20px;
    background-color: rgba(255, 255, 255, 0.2);
    position: relative;
  }

  .connector::after {
    content: '';
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-top: 5px solid transparent;
    border-bottom: 5px solid transparent;
    border-left: 5px solid rgba(255, 255, 255, 0.2);
  }

  @media (max-width: 768px) {
    .diagram {
      flex-direction: column;
    }

    .connector {
      height: 20px;
      width: 2px;
    }

    .connector::after {
      right: 50%;
      top: 100%;
      transform: translateX(50%);
      border-left: 5px solid transparent;
      border-right: 5px solid transparent;
      border-top: 5px solid rgba(255, 255, 255, 0.2);
      border-bottom: none;
    }

    .node {
      min-width: 200px;
    }
  }
</style>
